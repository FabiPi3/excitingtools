window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "excitingtools", "modulename": "excitingtools", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.dataclasses", "modulename": "excitingtools.dataclasses", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.dataclasses.band_structure", "modulename": "excitingtools.dataclasses.band_structure", "kind": "module", "doc": "<p>Band structure class.</p>\n"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.__init__", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.__init__", "kind": "function", "doc": "<p>Initialise BandData.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>bands</strong>:  Band energies with shape (n_k_points, n_bands).</li>\n<li>k_points: k-points at which the band energies have been computed.</li>\n<li>e_fermi: Fermi level.</li>\n<li>flattened_k_points: Flattened k-points along which one can plot a band structure.</li>\n<li>vertices: exciting output containing high-symmetry points and symbols along the\nflattened k-path, as defined in exciting.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">bands</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">k_points</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">e_fermi</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">flattened_k_points</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.band_path", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.band_path", "kind": "function", "doc": "<p>Get an array of points in the k-path that correspond to high symmetry points,\nand a list of their labels.</p>\n\n<p>vertices expected to have the form\n[{'distance': float, 'label': str, 'coord': [float, float, float]}, ...]\nparsed from exciting's bandstructure.xml file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Tuple of NumPy array containing high symmetry points and list containing their labels.\n  If vertices is None, return empty containers.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.get_k_point_index", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.get_k_point_index", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k_point</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.get_band_edges", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.get_band_edges", "kind": "function", "doc": "<p>Get indices of the valence and conduction bands.</p>\n\n<p>:return Tuple of indices for the valence and conduction bands. A ValueError is returned if the Fermi level is\nlocated higher than the energy bands.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.get_valence_band_maximum", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.get_valence_band_maximum", "kind": "function", "doc": "<p>Get the value of the valence band maximum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.get_conduction_band_minimum", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.get_conduction_band_minimum", "kind": "function", "doc": "<p>Get the value of the conduction band minimum.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.get_fundamental_band_gap", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.get_fundamental_band_gap", "kind": "function", "doc": "<p>Get the value of the fundamental band gap.</p>\n\n<p>:return fundamental band gap. The band gap is set to zero if bands cross the Fermi level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.band_structure.BandData.get_band_gap", "modulename": "excitingtools.dataclasses.band_structure", "qualname": "BandData.get_band_gap", "kind": "function", "doc": "<p>Get the value of the band gap calculated between two given k-points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k_valence</strong>:  k-point for the valence band.</li>\n<li><strong>k_conduction</strong>:  k-point for the valence band.\n:return band gap.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k_valence</span>, </span><span class=\"param\"><span class=\"n\">k_conduction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.data_structs", "modulename": "excitingtools.dataclasses.data_structs", "kind": "module", "doc": "<p>Data Structures.</p>\n\n<p>Data structure is defined as a container for data.\nMany of these classes could be @dataclass, however excitingtools\nretains support for python 3.6.</p>\n"}, {"fullname": "excitingtools.dataclasses.data_structs.PointIndex", "modulename": "excitingtools.dataclasses.data_structs", "qualname": "PointIndex", "kind": "class", "doc": "<p>Container for (point, index) pair</p>\n"}, {"fullname": "excitingtools.dataclasses.data_structs.PointIndex.__init__", "modulename": "excitingtools.dataclasses.data_structs", "qualname": "PointIndex.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">point</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "excitingtools.dataclasses.data_structs.BandIndices", "modulename": "excitingtools.dataclasses.data_structs", "qualname": "BandIndices", "kind": "class", "doc": "<p>Indices of valence band maximum and conduction band minimum</p>\n"}, {"fullname": "excitingtools.dataclasses.data_structs.BandIndices.__init__", "modulename": "excitingtools.dataclasses.data_structs", "qualname": "BandIndices.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">VBM</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">CBm</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "excitingtools.dataclasses.data_structs.NumberOfStates", "modulename": "excitingtools.dataclasses.data_structs", "qualname": "NumberOfStates", "kind": "class", "doc": "<p>Number of states. Useful when indexing does not start at 0/1</p>\n"}, {"fullname": "excitingtools.dataclasses.data_structs.NumberOfStates.__init__", "modulename": "excitingtools.dataclasses.data_structs", "qualname": "NumberOfStates.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">first_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">last_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "excitingtools.dataclasses.density_of_states", "modulename": "excitingtools.dataclasses.density_of_states", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.dataclasses.density_of_states.DOS", "modulename": "excitingtools.dataclasses.density_of_states", "qualname": "DOS", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "excitingtools.dataclasses.density_of_states.DOS.__init__", "modulename": "excitingtools.dataclasses.density_of_states", "qualname": "DOS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">energy</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">dos</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "excitingtools.dataclasses.eigenvalues", "modulename": "excitingtools.dataclasses.eigenvalues", "kind": "module", "doc": "<p>Eigenvalue class.</p>\n"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.__init__", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">state_range</span><span class=\"p\">:</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">NumberOfStates</span>,</span><span class=\"param\">\t<span class=\"n\">k_points</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">k_indices</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">all_eigenvalues</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.get_array_index", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.get_array_index", "kind": "function", "doc": "<p>Given the state index, get the corresponding index in the eigenvalue array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i_state</strong>:  State index using fortran indexing\n:return array index, using zero-indexing</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.get_k_point", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.get_k_point", "kind": "function", "doc": "<p>Get the k-point associated with ik index.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ik</strong>:  k-point index.\n:return k-point in fractional coordinates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ik</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.get_index", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.get_index", "kind": "function", "doc": "<p>Find the corresponding index of a k-point.</p>\n\n<p>If no k-point is found, NO_MATCH is returned.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>k_point</strong>:  k-point in fractional coordinates.</li>\n<li><strong>verbose</strong>:  Print warning, if no k-point found.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Corresponding index w.r.t. exciting.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">k_point</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.get_k_points", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.get_k_points", "kind": "function", "doc": "<p>K-points and their indices</p>\n\n<p>Note. Fortran indexing for ik always input and output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">PointIndex</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.get_eigenvalues", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.get_eigenvalues", "kind": "function", "doc": "<p>Return eigenvalues for column=\"data\" w.r.t. k-point.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ik</strong>:  k-point index.</li>\n<li><strong>k_point</strong>:  k-point, used to find the k-index if ik is not passed.\n:return eigenvalues at ik k-point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ik</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">k_point</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.dataclasses.eigenvalues.EigenValues.band_gap", "modulename": "excitingtools.dataclasses.eigenvalues", "qualname": "EigenValues.band_gap", "kind": "function", "doc": "<p>Get a band gap for two k-points in the valence band top\nand conduction band bottom, respectively.</p>\n\n<p>TODO(Alex) Consider adding objects to hold k_points and k_indices.\nHowever, one can retain support for tuples/lists.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>band_indices</strong>:  Band indices</li>\n<li><strong>k_points</strong>:  k-points for the valence and conduction bands, in that order.</li>\n<li><strong>k_indices</strong>:  k-indices for the valence and conduction bands, in that order.\n:return Band gap. A ValueError is returned if one or both k-points are not present.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">band_indices</span><span class=\"p\">:</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">BandIndices</span>,</span><span class=\"param\">\t<span class=\"n\">k_points</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">k_indices</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers", "modulename": "excitingtools.exciting_dict_parsers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "modulename": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "kind": "module", "doc": "<p>Parsers for real-time TDDFT output files</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser.parse_nexc", "modulename": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "qualname": "parse_nexc", "kind": "function", "doc": "<p>Parser for NEXC.OUT</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">skiprows</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser.parse_jind", "modulename": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "qualname": "parse_jind", "kind": "function", "doc": "<p>Parser for JIND.OUT</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">skiprows</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser.parse_etot", "modulename": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "qualname": "parse_etot", "kind": "function", "doc": "<p>Parser for ETOT_RTTDDFT.OUT</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser.parse_eigval_screenshots", "modulename": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "qualname": "parse_eigval_screenshots", "kind": "function", "doc": "<p>Parser for EIGVAL_*.OUT.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser.parse_proj_screenshots", "modulename": "excitingtools.exciting_dict_parsers.RT_TDDFT_parser", "qualname": "parse_proj_screenshots", "kind": "function", "doc": "<p>Parser for PROJ_*.OUT.</p>\n\n<p>Effectively the same code as parse_eigval_screenshots, but the whitespace\nbetween blocks differs by 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.bse_parser", "modulename": "excitingtools.exciting_dict_parsers.bse_parser", "kind": "module", "doc": "<p>Parsers for BSE output files.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.bse_parser.numpy_gen_from_txt", "modulename": "excitingtools.exciting_dict_parsers.bse_parser", "qualname": "numpy_gen_from_txt", "kind": "function", "doc": "<p>Numpy genfromtxt, dressed in try/expect.</p>\n\n<p>Not worth generalising, as would need to support genfromtxt's API.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  File name.</li>\n<li><strong>skip_header</strong>:  Optional number of header lines to skip.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">skip_header</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.bse_parser.parse_EPSILON_NAR", "modulename": "excitingtools.exciting_dict_parsers.bse_parser", "qualname": "parse_EPSILON_NAR", "kind": "function", "doc": "<p>Parser for:\n    EPSILON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC.OUT.xml,\n    EPSILON_NAR_FXCMB1_OC_QMT001.OUT.xml,\n    EPSILON_NAR_NLF_FXCMB1_OC_QMT001.OUT.xml,\n    LOSS_NAR_FXCMB1_OC_QMT001.OUT.xml</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.bse_parser.parse_LOSS_NAR", "modulename": "excitingtools.exciting_dict_parsers.bse_parser", "qualname": "parse_LOSS_NAR", "kind": "function", "doc": "<p>Parser for:\n LOSS_NAR_FXCMB1_OC_QMT001.OUT.xml,\n LOSS_NAR_NLF_FXCMB1_OC_QMT001.OUT.xml</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.bse_parser.parse_EXCITON_NAR_BSE", "modulename": "excitingtools.exciting_dict_parsers.bse_parser", "qualname": "parse_EXCITON_NAR_BSE", "kind": "function", "doc": "<p>Parser for EXCITON_NAR_BSE-singlet-TDA-BAR_SCR-full_OC.OUT</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.bse_parser.parse_infoxs_out", "modulename": "excitingtools.exciting_dict_parsers.bse_parser", "qualname": "parse_infoxs_out", "kind": "function", "doc": "<p>Parser for INFOXS.OUT file. Parses only the started and stopped tasks.\nSearches for lines like:\n    'EXCITING <version> started for task <taskname> (<tasknumber>)'\nand\n    'EXCITING <version> stopped for task <tasknumber>'\nSee example file: exciting/test/test_farm/BSE/PBE_SOL-LiF/ref/INFOXS.OUT\nIf a started task is found, it gets stored with name, number and status.\nIf the task is found to be finished afterwards, the status finished is set to True.</p>\n\n<p>For success, the last started tasks has to be finished after that (in the file).\nLast finished task is the last task if calculation was successful, the task before that if it finished, else None.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  path of the file to parse\n:returns: dictionary containing parsed file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "kind": "module", "doc": "<p>Ground state file parsers.</p>\n\n<p>All functions in this module could benefit from refactoring.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser.parse_info_out", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "qualname": "parse_info_out", "kind": "function", "doc": "<p>Parser exciting INFO.OUT into a dictionary.\nIn:\n    name     string     path of the file to parse\nOut:\n    info     dict       contains the content of the file to parse</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser.parse_info_xml", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "qualname": "parse_info_xml", "kind": "function", "doc": "<p>Parser exciting info.xml into a python dictionary.\nIn:\n    name     string     path of the file to parse\nOut:\n    info     dict       contains the content of the file to parse</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser.parse_atoms", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "qualname": "parse_atoms", "kind": "function", "doc": "<p>Parser exciting atoms.xml into a python dictionary. <br />\nIn: <br />\n    name     string     path of the file to parse <br />\nOut: <br />\n    info     dict       contains the content of the file to parse</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser.parse_eigval", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "qualname": "parse_eigval", "kind": "function", "doc": "<p>Parser exciting eigval.xml into a python dictionary. <br />\nIn: <br />\n    name     string     path of the file to parse <br />\nOut: <br />\n    info     dict       contains the content of the file to parse</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser.parse_evalcore", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "qualname": "parse_evalcore", "kind": "function", "doc": "<p>Parser exciting evalcore.xml into a python dictionary. <br />\nIn: <br />\n    name     string     path of the file to parse <br />\nOut: <br />\n    info     dict       contains the content of the file to parse</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.groundstate_parser.parse_geometry", "modulename": "excitingtools.exciting_dict_parsers.groundstate_parser", "qualname": "parse_geometry", "kind": "function", "doc": "<p>Parser exciting geometry.xml into a python dictionary. <br />\nIn: <br />\n    name     string     path of the file to parse <br />\nOut: <br />\n    info     dict       contains the content of the file to parse</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "kind": "module", "doc": "<p>Parse GW's EVALQP.DAT file into dicts.\nAlso seemed like a logical place to add the Fermi-level parser.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.parse_efermi_gw", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "parse_efermi_gw", "kind": "function", "doc": "<p>Parser for EFERMI_GW.OUT.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>GW Fermi level.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.k_points_from_evalqp", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "k_points_from_evalqp", "kind": "function", "doc": "<p>Get the irreducible k/q-points and weights from 'EVALQP.DAT'</p>\n\n<p>These <em>can</em>  differ from those reported in 'KPOINTS', depending\non the choice of ngridq in GW</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_string</strong>:  File string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>k-points and their weights.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.n_states_from_evalqp", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "n_states_from_evalqp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">NumberOfStates</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.n_states_from_file", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "n_states_from_file", "kind": "function", "doc": "<p>Get the total number of states used per k-point, from EVALQP.DAT.</p>\n\n<p>Expect n_states to be fixed per k-point, however GW corrections can apply\nover any state interval [ibgw: nbgw], therefore extract the first state\nindex and the last state index from the first and last k-points,\nrespectively - for optimal parsing efficiency.</p>\n\n<p>Could also extract from input.xml.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string.\n:param n_header Number of header lines.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Number of states per k-point (occupied plus empty).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">n_header</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">NumberOfStates</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.parse_evalqp_blocks", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "parse_evalqp_blocks", "kind": "function", "doc": "<p>Parse energy information from EVALQP.dat.</p>\n\n<p>The function expects k-points of the form:</p>\n\n<p>k_points[ik] = {'k_point': k_point, 'weight': weight}</p>\n\n<p>where the k-index (ik) follows fortran indexing convention, and is expected to be\ncontiguous. The function returns parsed data, with each element of shape (n_states, 10).</p>\n\n<p>The routine exploits the repeating structure EVALQP.dat:\n   kpoint k1 k2 k3 weight\n   header line\n   first state (ibgw)\n   .\n   .\n   last state (nbgw)</p>\n\n<p>kpoint k1 k2 k3 weight\n   header line\n   first state (ibgw)\n   .\n   .\n   last state (nbgw)</p>\n\n<p>to parse all energies per k-point.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str full_file_name</strong>:  Path + file name</li>\n<li><strong>dict k_points</strong>:  Dictionary of k-points</li>\n<li><strong>int n_states</strong>:  Total number of occupied plus empty states\nNote, this is constant per q-point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed energies from EVALQP.dat</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">k_points</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">n_states</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.parse_evalqp", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "parse_evalqp", "kind": "function", "doc": "<p>Parse GW output file EVALQP.DAT</p>\n\n<p>Parse  and return data of the form:\n  data[ik] = {'k_point': k_point, 'weight': weight, 'energies': energies}</p>\n\n<p>NOTE(Alex) Would be good to transpose this: row-major access.</p>\n\n<p>For oxygen release:\n  energies have the shape (n_states, 10), where the 10 elements are defined as:\n  ('E_KS', 'E_HF', 'E_GW', 'sigma_x', 'Re_sigma_c', 'Im_sigma_c', 'V_xc', 'delta_HF', 'delta_GW', 'Znk')</p>\n\n<p>For nitrogen release:\n  energies have the shape (n_states, 10), where the 10 elements are defined as:\n  ('E_KS', 'E_HF', 'E_GW', 'Sx', 'Sc', 'Vxc', 'DE_HF', 'DE_GW', 'Znk')</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str full_file_name</strong>:  Path + file name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed k-points and energies from EVALQP.DAT</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.parse_column_labels", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "parse_column_labels", "kind": "function", "doc": "<p>Parse the column labels of EVALQP.DAT, which vary between code versions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string\nreturn An enum class with the column labels as attributes, with corresponding\nvalues starting from 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser.parse_gw_dos", "modulename": "excitingtools.exciting_dict_parsers.gw_eigenvalues_parser", "qualname": "parse_gw_dos", "kind": "function", "doc": "<p>Parser for GW DOS files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_file_name</strong>:  Path + file name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed energies and DOS from GW DOS files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eps00_parser", "modulename": "excitingtools.exciting_dict_parsers.gw_eps00_parser", "kind": "module", "doc": "<p>Parsers for GW's EPS00_GW.OUT output.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eps00_parser.parse_eps00_frequencies", "modulename": "excitingtools.exciting_dict_parsers.gw_eps00_parser", "qualname": "parse_eps00_frequencies", "kind": "function", "doc": "<p>Parse frequencies from EPS00_GW.OUT.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>frequency}</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eps00_parser.parse_eps00_blocks", "modulename": "excitingtools.exciting_dict_parsers.gw_eps00_parser", "qualname": "parse_eps00_blocks", "kind": "function", "doc": "<p>Parser for epsilon blocks in EPS00_GW.OUT.</p>\n\n<p>File of the form:</p>\n\n<p>(dielectric tensor, random phase approximation)</p>\n\n<p>frequency index and value:      1    0.01985507\nreal part, imaginary part below\n 152.69882148    0.00000000    0.00000000         0.00000000    0.00000000    0.00000000\n   0.00000000  152.69882148    0.00000000         0.00000000    0.00000000    0.00000000\n   0.00000000    0.00000000  152.69882148         0.00000000    0.00000000    0.00000000</p>\n\n<p>frequency index and value:      2    0.02771249\n real part, imaginary part below\n    8.22189228    0.00000000    0.00000000        -0.00000000    0.00000000    0.00000000\n    0.00000000    8.22189228    0.00000000         0.00000000   -0.00000000    0.00000000\n    0.00000000    0.00000000    8.22189228         0.00000000    0.00000000   -0.00000000</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n<li><strong>int n_freq</strong>:  Number of frequency points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict containing real and imaginary parts of the dielectric function,\n   eps00, for each frequency point. Frequency indexing (keys) start at 1.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">n_freq</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_eps00_parser.parse_eps00_gw", "modulename": "excitingtools.exciting_dict_parsers.gw_eps00_parser", "qualname": "parse_eps00_gw", "kind": "function", "doc": "<p>Parser frequency grid and epsilon00 from EPS00_GW.OUT.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dict containing the frequency, and real and imaginary parts\n   of the dielectric function, eps00, for each frequency point.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "kind": "module", "doc": "<p>GW_INFO.OUT Parser, and all sub-block parses that comprise it.</p>\n\n<p>NOTE. This could be trivialised to one line if GW_INFO.OUT was refactored\nto write to YAML.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_correlation_self_energy_params", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_correlation_self_energy_params", "kind": "function", "doc": "<p>Parse correlation self-energy parameters.</p>\n\n<p>Match the key on one line and return the value from the second, according to some\nspecified extraction behaviour given by <code>keys_extractions</code>.</p>\n\n<p>Also extract the analytic continuation and singularity schemes, plus their references.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_mixed_product_params", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_mixed_product_params", "kind": "function", "doc": "<p>Parse mixed product basis parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_bare_coulomb_potential_params", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_bare_coulomb_potential_params", "kind": "function", "doc": "<p>Extract bare Coulomb parameter data of the form:</p>\n\n<p>Bare Coulomb potential parameters:\n    Plane wave cutoff (in units of Gkmax*input%gw%MixBasis%gmb): 2.00000000000000\n    Error tolerance for structure constants:   1.000000000000000E-016\n    Tolerance factor to reduce the MB size based on\n    the eigenvectors of the bare Coulomb potential:   0.100000000000000</p>\n\n<p>and return a dictionary of the form:</p>\n\n<p>{'Plane wave cutoff (in units of Gkmax*gmb)': 2.0,\n 'Error tolerance for structure constants': 1e-16,\n  'MB tolerance factor': 0.1\n}</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_mixed_product_wf_info", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_mixed_product_wf_info", "kind": "function", "doc": "<p>Parse mixed product wave function information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_frequency_grid_info", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_frequency_grid_info", "kind": "function", "doc": "<p>Parse frequency grid information.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_frequency_grid", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_frequency_grid", "kind": "function", "doc": "<p>Parse the frequency grid and weights used with GW</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n<li><strong>int n_points</strong>:  Number of frequency grid points</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>],\n  respectively</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_ks_eigenstates", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_ks_eigenstates", "kind": "function", "doc": "<p>Parse information on the KS eigenstates used.\nNote, final keys will have the trailing whitespace stripped.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_n_q_point_cycles", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_n_q_point_cycles", "kind": "function", "doc": "<p>Get the maximum number of q iterations performed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>maximum nunber of q iterations performed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.extract_kpoint", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "extract_kpoint", "kind": "function", "doc": "<p>Parse the substring of the form:</p>\n\n<p>at k =    0.000   0.500   0.500 ik =     3</p>\n\n<p>returning a dictionary of the form:</p>\n\n<p>{'VBM': {'k_point': [0.0, 0.5, 0.5], 'ik': 3},\n  'CBm': {'k_point': [0.0, 0.5, 0.5], 'ik': 3}\n  }</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data, of the form documented</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.extract_kpoints", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "extract_kpoints", "kind": "function", "doc": "<p>Parse the substring of the form:</p>\n\n<p>at k(VBM) =    0.000   0.500   0.500 ik =     3\n    k(CBm) =    0.000   0.000   0.000 ik =     1</p>\n\n<p>returning a dictionary of the form:</p>\n\n<p>{'VBM': {'k_point': [0.0, 0.5, 0.5], 'ik': 3},\n  'CBm': {'k_point': [0.0, 0.0, 0.0], 'ik': 1}\n  }</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data, of the form documented</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_band_structure_info", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_band_structure_info", "kind": "function", "doc": "<p>Parse KS or GW band structure information.</p>\n\n<p>This routine assumes that the KS band structure info will ALWAYS appear\nbefore the GW band structure info.</p>\n\n<p>Two situations can occur.</p>\n\n<ul>\n<li><ol>\n<li>Indirect bandgap:</li>\n</ol>\n\n<p>Indirect BandGap (eV):                    3.3206\nat k(VBM) =    0.000   0.500   0.500 ik =     3\nk(CBm) =    0.000   0.000   0.000 ik =     1\nDirect Bandgap at k(VBM) (eV):            3.7482\nDirect Bandgap at k(CBm) (eV):            3.8653</p></li>\n<li><ol>\n<li>Direct bandgap:</li>\n</ol>\n\n<p>Direct BandGap (eV):                      2.3903\nat k      =    0.000   0.000   0.000 ik =     1</p></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str bs_type</strong>:  Band structure type to parse. Either 'ks' or 'gw'</li>\n<li><strong>str file_string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">bs_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_gw_info", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_gw_info", "kind": "function", "doc": "<p>Parse data from GW_INFO.OUT.</p>\n\n<p>Timings are not parsed because it's more convenient for regression-testing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Parsed file string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict data: dictionary of parsed data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.extract_gw_timings_as_list", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "extract_gw_timings_as_list", "kind": "function", "doc": "<p>Extract GW timing string block as a list.</p>\n\n<p>Utilises the fact that timings are returned at the end of GW_INFO.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Parsed file string</li>\n<li><strong>list timings</strong>:  GW timings, with each element storing a\nline of timings as a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_info_parser.parse_gw_timings", "modulename": "excitingtools.exciting_dict_parsers.gw_info_parser", "qualname": "parse_gw_timings", "kind": "function", "doc": "<p>Parse timings returned by the GW method.</p>\n\n<p>Assumptions:</p>\n\n<ul>\n<li>Initial timing value is 'Initialization'</li>\n<li>Final timing value is 'Total'</li>\n</ul>\n\n<p>Returns a dictionary with each time subheading storing\na dictionary of timing breakdowns.</p>\n\n<p>If the subheading has a time associated with it, that is stored\nin the breakdowns with the same key. If it has no associated timing,\nthe value is None.</p>\n\n<p>For example:</p>\n\n<p>'Subroutines': {'Subroutines': None,\n                'calcpmat': 5.12,\n                'calcbarcmb': 5.65,\n                'BZ integration weights': 18.35\n                }</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Parsed file string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict data: dictionary of parsed timings</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_vxc_parser", "modulename": "excitingtools.exciting_dict_parsers.gw_vxc_parser", "kind": "module", "doc": "<p>VXCNN.DAT Parser.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_vxc_parser.vkl_from_vxc", "modulename": "excitingtools.exciting_dict_parsers.gw_vxc_parser", "qualname": "vkl_from_vxc", "kind": "function", "doc": "<p>Extract vkl (k-points in fractional coordinates) from VXCNN.DAT.</p>\n\n<p>Each k-point header is defined like:\n ik=   1    vkl=  0.0000  0.0000  0.0000</p>\n\n<p>k-indices are not extracted as they are always contiguous,\nwith indexing starting at 1.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  File string.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>k-points in fractional coordinates.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_vxc_parser.parse_vxnn_vectors", "modulename": "excitingtools.exciting_dict_parsers.gw_vxc_parser", "qualname": "parse_vxnn_vectors", "kind": "function", "doc": "<p>Parse VXC diagonal matrix elements from VXCNN.DAT.</p>\n\n<p>The routine exploits the repeating file structure:</p>\n\n<p>ik=   1    vkl=  0.0000  0.0000  0.0000\n    1       -2.908349       -0.000000\n    2       -2.864103        0.000000\n    3       -2.864103       -0.000000\n    .\n    n_states</p>\n\n<p>ik=   2    vkl=  0.0000  0.0000  0.5000\n    1       -2.908349        0.000000\n    2       -2.864100       -0.000000\n    3       -2.864100        0.000000\n    .\n    n_states</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str full_file_name</strong>:  Path + file name</li>\n<li><strong>dict vkl</strong>:  Dictionary of vkl (k-points?)</li>\n<li><strong>int n_states</strong>:  Total number of occupied plus empty states\nNote, this is constant per q-point.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed VXC diagonal matrix elements, per k-point.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">vkl</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">n_states</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_vxc_parser.n_states_from_vxcnn", "modulename": "excitingtools.exciting_dict_parsers.gw_vxc_parser", "qualname": "n_states_from_vxcnn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">data_structs</span><span class=\"o\">.</span><span class=\"n\">NumberOfStates</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.gw_vxc_parser.parse_vxcnn", "modulename": "excitingtools.exciting_dict_parsers.gw_vxc_parser", "qualname": "parse_vxcnn", "kind": "function", "doc": "<p>Parser for VXCNN.DAT.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str full_file_name</strong>:  Path + file name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed k-points (labelled as vkl) and the diagonal elements of\n   Vxc, per k-point.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.input_parser", "modulename": "excitingtools.exciting_dict_parsers.input_parser", "kind": "module", "doc": "<p>Parsers for input.xml.</p>\n\n<p>TODO(Fabian): Issues 117 &amp; 121:\nAs more sub-elements are implemented in the input files, also add parsers here</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.input_parser.parse_groundstate", "modulename": "excitingtools.exciting_dict_parsers.input_parser", "qualname": "parse_groundstate", "kind": "function", "doc": "<p>Parse exciting input.xml groundstate element into python dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: Dictionary containing the groundstate input element attributes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.input_parser.parse_structure", "modulename": "excitingtools.exciting_dict_parsers.input_parser", "qualname": "parse_structure", "kind": "function", "doc": "<p>Parse exciting input.xml structure element into python dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: Dictionary containing the structure input element attributes and subelements. Looks like:\n{'atoms': List of atoms with atom positions in fractional coordinates,\n 'lattice': List of 3 lattice vectors, 'species_path': species_path as string,\n 'structure_properties': dictionary with the structure_properties,\n 'crystal_properties': dictionary with the crystal_properties,\n 'species_properties': dictionary with the species_properties}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.input_parser.parse_xs", "modulename": "excitingtools.exciting_dict_parsers.input_parser", "qualname": "parse_xs", "kind": "function", "doc": "<p>Parse exciting input.xml xs element into python dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: Dictionary containing the xs input element attributes and subelements. Could look like:\n{'xstype': xstype as string, 'xs_properties': dictionary with the xs_properties,\n 'energywindow': dictionary with the energywindow_properties,\n 'screening': dictionary with the screening_properties, 'BSE': dictionary with bse_properties,\n 'qpointset': List of qpoints, 'plan': List of tasks}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.input_parser.parse_input_xml", "modulename": "excitingtools.exciting_dict_parsers.input_parser", "qualname": "parse_input_xml", "kind": "function", "doc": "<p>Parse exciting input.xml into python dictionaries.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: Dictionary which looks like: {'structure': structure_dict,\n'ground_state': groundstate_dict, 'xs': xs_dict}.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.parser_factory", "modulename": "excitingtools.exciting_dict_parsers.parser_factory", "kind": "module", "doc": "<p>Function for selecting a parser, given a file name and parsing the data.</p>\n\n<p>When adding a new file, it should be added to the dictionary <code>_file_to_parser</code></p>\n\n<p>REQUIREMENTS. Parser function must:\n a) accept a file name (not a contents string)\n b) return a dictionary.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.parser_factory.truncate_fnames_with_exts", "modulename": "excitingtools.exciting_dict_parsers.parser_factory", "qualname": "truncate_fnames_with_exts", "kind": "function", "doc": "<p>Truncate file names that have open-ended extensions.</p>\n\n<p>For example:\n  EIGVAL_00.dat -> EIGVAL_\n  EIGVAL_01.dat -> EIGVAL_</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  File name containing fixed prefix and\nan extension beginning with '_'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>File name prefix, else input file name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.parser_factory.parser_chooser", "modulename": "excitingtools.exciting_dict_parsers.parser_factory", "qualname": "parser_chooser", "kind": "function", "doc": "<p>Selects parser according to the name of the input file then returns the result of the parser.</p>\n\n<p>REQUIREMENTS. Parser function must:\n a) accept a file name (not a contents string)\n b) return a dictionary.</p>\n\n<p>param: str, full_file_name: file name prepended by full path\nreturn: parsed data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "kind": "module", "doc": "<p>Parsers for exciting properties.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_plot_3d", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_plot_3d", "kind": "function", "doc": "<p>Parser for RHO3D.xml, VCL3D.xml, VXC3D.xml, WF3D.xml, ELF3D.xml, EF3D.xmlit</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_lsj", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_lsj", "kind": "function", "doc": "<p>Parser for LSJ.xml</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_efg", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_efg", "kind": "function", "doc": "<p>Parser for EFG.xml</p>\n\n<p>Returns a dictionary of the form:\n  data = {'species1': {'chemicalSymbol': chemicalSymbol,\n                      'atom1': { 'trace': trace,\n                                 'efg: efg,\n                                 'eigenvalues': eigenvalues\n                               },\n                      'atom2': {},\n                      }\n          'species2':...\n        }</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_mossbauer", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_mossbauer", "kind": "function", "doc": "<p>Parser for mossbauer.xml</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_expiqr", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_expiqr", "kind": "function", "doc": "<p>Parser for expiqr.xml</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_effmass", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_effmass", "kind": "function", "doc": "<p>Parser for effmass.xml</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_bandstructure_depreciated", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_bandstructure_depreciated", "kind": "function", "doc": "<p>Parser for bandstructure.xml.</p>\n\n<p>Used for parsing in the test framework, as returns a dict.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_band_structure_xml", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_band_structure_xml", "kind": "function", "doc": "<p>Parse KS band structure from bandstructure.xml.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Band structure XML file name, XML string or ElementTree.Element as input.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Band data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_band_structure_dat", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_band_structure_dat", "kind": "function", "doc": "<p>Parser for bandstructure.dat</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_dos", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_dos", "kind": "function", "doc": "<p>Parser for dos.xml</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_charge_density", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_charge_density", "kind": "function", "doc": "<p>Parse charge density from RHO1D.xml file.</p>\n\n<p><code>axis</code> and <code>vertex</code> sub-trees ignored in the parsing.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  XML file name, XML string or ElementTree.Element as input.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Numpy array containing rho[:, 1] = distance and rho[:, 2] = density.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_kerr", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_kerr", "kind": "function", "doc": "<p>Parser for KERR.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_epsilon", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_epsilon", "kind": "function", "doc": "<p>Parser for EPSILON_ij.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_chi", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_chi", "kind": "function", "doc": "<p>Parser for CHI_111.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_elnes", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_elnes", "kind": "function", "doc": "<p>Parser for ELNES.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_seebeck", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_seebeck", "kind": "function", "doc": "<p>Parser for SEEBECK_11.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_ldos", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_ldos", "kind": "function", "doc": "<p>Parser for ldos.out</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_band_edges", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_band_edges", "kind": "function", "doc": "<p>Parser for band_edges.out</p>\n\n<p>Keys</p>\n\n<ul>\n<li>c_axis corresponds to the linear grid along the magnitude\nof the c vector of the unit cell.</li>\n<li>VBM = Valence band maximum</li>\n<li>CBm = Conduction band minimum</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_spintext", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_spintext", "kind": "function", "doc": "<p>Parse spintext.xml</p>\n\n<p>TODO(Bene) Issue 87 Refactor to return a dict</p>\n\n<p>Each element of the list contains a dict with keys:\n ['ist', 'k-point', 'spin', 'energy']</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  Path to the spintext.xml that will be parsed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List that holds the parsed spintexture.xml</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_polarization", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_polarization", "kind": "function", "doc": "<p>Parser for POLARIZATION.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_tdos_wannier", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_tdos_wannier", "kind": "function", "doc": "<p>Parser for TDOS_WANNIER.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_wannier_info", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_wannier_info", "kind": "function", "doc": "<p>Parser for WANNIER_INFO.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_core_overlap", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_core_overlap", "kind": "function", "doc": "<p>Parser for coreoverlap.xml</p>\n\n<p>Parsed dictionary has the structure:</p>\n\n<pre><code>output = {'nkpt':  nkpt\n          'nstfv': nstfv\n          'ncg':   ncg\n          'kpoints': [{'index': index, 'pairs': pairs},\n                      {'index': index, 'pairs': pairs},\n                      ...]\n          }\n</code></pre>\n\n<p>where output['kpoints'][ik]['pairs'] =\n  [{'ist1': '1', 'ist2': '1', 'de': 12.97849772, 'overlap': 3.35753859e-07},\n   {'ist1': '1', 'ist2': '2', 'de': 12.97849772, 'overlap': 3.35753859e-07},\n   ...\n   n_pairs]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str name</strong>:  File name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.properties_parser.parse_lossfunction", "modulename": "excitingtools.exciting_dict_parsers.properties_parser", "qualname": "parse_lossfunction", "kind": "function", "doc": "<p>Parses files containing loss function\ne.g. LOSS_FXCRPA_OC11_QMT001.OUT</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str fname</strong>:  name of the file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_dict_parsers.species_parser", "modulename": "excitingtools.exciting_dict_parsers.species_parser", "kind": "module", "doc": "<p>Parse exciting species files into dictionary.</p>\n"}, {"fullname": "excitingtools.exciting_dict_parsers.species_parser.parse_species_xml", "modulename": "excitingtools.exciting_dict_parsers.species_parser", "qualname": "parse_species_xml", "kind": "function", "doc": "<p>Parses exciting species files as a dict.</p>\n\n<p>TODO(Alex) Issue 124. See how easy it is to replace with a generic XML\nparser, with keys defined according to the associated schema.</p>\n\n<p>Return a dictionary with elements:</p>\n\n<p>species = {'chemicalSymbol': chemicalSymbol, 'name': name, 'z': z, 'mass': mass}</p>\n\n<p>muffin_tin = {'rmin': rmin, 'rinf': rinf, 'radius': radius, 'points':  radialmeshPoints}</p>\n\n<p>atomic_states = [{'n': 1, 'l': 0, 'kappa': 1, 'occ': 2.0, 'core': True},\n                  {'n': 2, 'l': 0, 'kappa': 1, 'occ': 2.0, 'core': True}, ...]</p>\n\n<p>basis['default'] = [{'type': 'lapw', 'trialEnergy': '0.1500', 'searchE': 'true'}]</p>\n\n<p>basis['custom'] = [{'l': 0, 'type': 'lapw', 'trialEnergy': 1.35670550183736, 'searchE': False},\n                     {'l': 1, 'type': 'lapw', 'trialEnergy': -2.69952312512447, 'searchE': False},\n                     {'l': 2, 'type': 'lapw', 'trialEnergy': 0.00,  'searchE': False},\n                     {'l': 3, 'type': 'lapw', 'trialEnergy': 1.000, 'searchE': False},\n                     {'l': 4, 'type': 'lapw', 'trialEnergy': 1.000, 'searchE': False},\n                     {'l': 5, 'type': 'lapw', 'trialEnergy': 1.000, 'searchE': False}]</p>\n\n<p>basis['lo'] = [{'l': 0, 'matchingOrder': [0, 1], 'trialEnergy': [-4.3784, -4.3784], 'searchE': [False, False]},\n                 {'l': 0, 'matchingOrder': [0, 1], 'trialEnergy': [1.356, 1.3566], 'searchE': [False, False]},\n                ...]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  XML file, XML string, or an ET.Element.\n:return : Dictionary of species file data (described above).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers", "modulename": "excitingtools.exciting_obj_parsers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "kind": "module", "doc": "<p>GW eigenvalue parser, processing dict values and returning to an object.</p>\n"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.E_KS", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.E_KS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.E_KS: 0&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.E_HF", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.E_HF", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.E_HF: 1&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.E_GW", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.E_GW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.E_GW: 2&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.Sx", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.Sx", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.Sx: 3&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.Sc", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.Sc", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.Sc: 4&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.Vxc", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.Vxc", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.Vxc: 5&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.DE_HF", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.DE_HF", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.DE_HF: 6&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.DE_GW", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.DE_GW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.DE_GW: 7&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.NitrogenEvalQPColumns.Znk", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "NitrogenEvalQPColumns.Znk", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;NitrogenEvalQPColumns.Znk: 8&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns", "kind": "class", "doc": "<p>Columns of <code>_file_name</code>, for exciting oxygen\nexcluding the state index.</p>\n", "bases": "enum.Enum"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.E_KS", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.E_KS", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.E_KS: 0&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.E_HF", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.E_HF", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.E_HF: 1&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.E_GW", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.E_GW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.E_GW: 2&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.Sx", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.Sx", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.Sx: 3&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.Re_Sc", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.Re_Sc", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.Re_Sc: 4&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.Im_Sc", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.Im_Sc", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.Im_Sc: 5&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.Vxc", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.Vxc", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.Vxc: 6&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.DE_HF", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.DE_HF", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.DE_HF: 7&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.DE_GW", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.DE_GW", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.DE_GW: 8&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.OxygenEvalQPColumns.Znk", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "OxygenEvalQPColumns.Znk", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;OxygenEvalQPColumns.Znk: 9&gt;"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.gw_eigenvalue_parser", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "gw_eigenvalue_parser", "kind": "function", "doc": "<p>High-level Parser for GW eigenvalues file.</p>\n\n<p>Unpacks the result of dict into a sensible form and returns the data to return_type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_file_path</strong>:  File path (can include or exclude file name).</li>\n<li><strong>columns</strong>:  Optional choice for which data column of energies to return. Default is to return\nGW eigenvalues, assuming exciting oxygen (most recent release).\n:return An instance of EigenValues, or a dict of (key, value) = [EvalQPColumns, EigenValues].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">OxygenEvalQPColumns</span><span class=\"o\">.</span><span class=\"n\">E_GW</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">eigenvalues</span><span class=\"o\">.</span><span class=\"n\">EigenValues</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">,</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">eigenvalues</span><span class=\"o\">.</span><span class=\"n\">EigenValues</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers.gw_eigenvalues.parse_obj_gw_dos", "modulename": "excitingtools.exciting_obj_parsers.gw_eigenvalues", "qualname": "parse_obj_gw_dos", "kind": "function", "doc": "<p>High-level parser for GW DOS files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>full_file_name</strong>:  Path + file name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>DOS object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">full_file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">density_of_states</span><span class=\"o\">.</span><span class=\"n\">DOS</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers.input_xml", "modulename": "excitingtools.exciting_obj_parsers.input_xml", "kind": "module", "doc": "<p>Parse input XML data directly into corresponding python classes.</p>\n"}, {"fullname": "excitingtools.exciting_obj_parsers.input_xml.parse_groundstate", "modulename": "excitingtools.exciting_obj_parsers.input_xml", "qualname": "parse_groundstate", "kind": "function", "doc": "<p>Parse exciting input.xml groundstate element into python ExcitingGroundStateInput.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: ExcitingGroundStateInput containing the groundstate input element attributes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers.input_xml.parse_structure", "modulename": "excitingtools.exciting_obj_parsers.input_xml", "qualname": "parse_structure", "kind": "function", "doc": "<p>Parse exciting input.xml structure element into python ExcitingStructure object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: ExcitingStructure containing the structure input element attributes and subelements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers.input_xml.parse_xs", "modulename": "excitingtools.exciting_obj_parsers.input_xml", "qualname": "parse_xs", "kind": "function", "doc": "<p>Parse exciting input.xml xs element into python ExcitingXSInput object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: ExcitingXSInput containing the xs input element attributes and subelements. Returns None if no xs element\nwas found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers.input_xml.parse_input_xml", "modulename": "excitingtools.exciting_obj_parsers.input_xml", "qualname": "parse_input_xml", "kind": "function", "doc": "<p>Parse exciting input.xml into the different python ExcitingInput Objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>root</strong>:  Input for the parser.\n:returns: Dictionary which looks like: {'structure': ExcitingStructure,\n'ground_state': ExcitingGroundstateInput, 'xs': ExcitingXSInput}\nIf no xs element was found, the value of 'xs' is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.exciting_obj_parsers.ks_band_structure", "modulename": "excitingtools.exciting_obj_parsers.ks_band_structure", "kind": "module", "doc": "<p>KS (ground state) Band structure Parser, returning to an object.</p>\n"}, {"fullname": "excitingtools.exciting_obj_parsers.ks_band_structure.parse_band_structure", "modulename": "excitingtools.exciting_obj_parsers.ks_band_structure", "qualname": "parse_band_structure", "kind": "function", "doc": "<p>High-level parser for KS band structure. Calls dictionary parsers to parse information from both\n\"bandstructure.xml\" and \"bandstructure.dat\" files.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_name</strong>:  File name for band structure such as \"bandstructure.dat\", \"bandstructure.xml\" or\n\"bandstructure\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>BandData object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">band_structure</span><span class=\"o\">.</span><span class=\"n\">BandData</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input", "modulename": "excitingtools.input", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.input.base_class", "modulename": "excitingtools.input.base_class", "kind": "module", "doc": "<p>Base class for exciting input classes.</p>\n"}, {"fullname": "excitingtools.input.base_class.ExcitingInput", "modulename": "excitingtools.input.base_class", "qualname": "ExcitingInput", "kind": "class", "doc": "<p>Base class for exciting inputs.</p>\n", "bases": "abc.ABC"}, {"fullname": "excitingtools.input.base_class.ExcitingInput.to_xml", "modulename": "excitingtools.input.base_class", "qualname": "ExcitingInput.to_xml", "kind": "function", "doc": "<p>Convert class attributes to XML ElementTree.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;xml.etree.ElementTree&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/Users/alexanderbuccheri/.conda/envs/exciting/lib/python3.9/xml/etree/ElementTree.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.base_class.ExcitingXMLInput", "modulename": "excitingtools.input.base_class", "qualname": "ExcitingXMLInput", "kind": "class", "doc": "<p>Base class for exciting inputs that only consist of many attributes.</p>\n", "bases": "ExcitingInput"}, {"fullname": "excitingtools.input.base_class.ExcitingXMLInput.__init__", "modulename": "excitingtools.input.base_class", "qualname": "ExcitingXMLInput.__init__", "kind": "function", "doc": "<p>Initialise class attributes with kwargs.</p>\n\n<p>Rather than define all options for a given method, pass as kwargs and directly\ninsert as class attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Method name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">valid_attributes</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "excitingtools.input.base_class.ExcitingXMLInput.to_xml", "modulename": "excitingtools.input.base_class", "qualname": "ExcitingXMLInput.to_xml", "kind": "function", "doc": "<p>Put class attributes into an XML tree, with the element given by self.name.</p>\n\n<p>Example ground state XML sub-tree:\n   <groundstate vkloff=\"0.5  0.5  0.5\" ngridk=\"2 2 2\" mixer=\"msec\" </groundstate></p>\n\n<p>Note, kwargs preserve the order of the arguments, however the order does not appear to be\npreserved when passed to (or perhaps converted to string) with xml.etree.ElementTree.tostring.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sub_tree element tree, with class attributes inserted.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;xml.etree.ElementTree&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/Users/alexanderbuccheri/.conda/envs/exciting/lib/python3.9/xml/etree/ElementTree.py&#39;</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.base_class.ExcitingXMLInput.to_xml_str", "modulename": "excitingtools.input.base_class", "qualname": "ExcitingXMLInput.to_xml_str", "kind": "function", "doc": "<p>Convert attributes to XML tree string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.base_class.query_exciting_version", "modulename": "excitingtools.input.base_class", "qualname": "query_exciting_version", "kind": "function", "doc": "<p>Query the exciting version\nInspect version.inc, which is constructed at compile-time.</p>\n\n<p>Assumes version.inc has this structure:\n #define GITHASH \"1a2087b0775a87059d53\"\n #define GITHASH2 \"5d01a5475a10f00d0ad7\"\n #define COMPILERVERSION \"GNU Fortran (MacPorts gcc9 9.3.0_4) 9.3.0\"\n #define VERSIONFROMDATE /21,12,01/</p>\n\n<p>TODO(Fab) Issue 117. Parse major version.\n Would need to parse src/mod_misc.F90 and regex for \"character(40) :: versionname = \"\n Refactor whole routine to use regex.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exciting_root</strong>:  exciting root directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Build and version details</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">exciting_root</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.ground_state", "modulename": "excitingtools.input.ground_state", "kind": "module", "doc": "<p>Module for class of exciting ground state.</p>\n\n<p>Ideally the input keywords (class attributes) should be parsed from the schema BUT\nbecause excitingtools will also be available as a standalone package, one would need\nto have a copy of the schema XML in excitingtools, which is kept synchronised with\nthe <EXCITINGROOT>/xml/.</p>\n"}, {"fullname": "excitingtools.input.ground_state.ExcitingGroundStateInput", "modulename": "excitingtools.input.ground_state", "qualname": "ExcitingGroundStateInput", "kind": "class", "doc": "<p>Base class for exciting inputs that only consist of many attributes.</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.ground_state.ExcitingGroundStateInput.__init__", "modulename": "excitingtools.input.ground_state", "qualname": "ExcitingGroundStateInput.__init__", "kind": "function", "doc": "<p>Generate an object of ExcitingXMLInput for the groundstate attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "excitingtools.input.input_xml", "modulename": "excitingtools.input.input_xml", "kind": "module", "doc": "<p>Generate an exciting XML input tree.</p>\n"}, {"fullname": "excitingtools.input.input_xml.initialise_input_xml", "modulename": "excitingtools.input.input_xml", "qualname": "initialise_input_xml", "kind": "function", "doc": "<p>Initialise input.xml element tree for exciting.</p>\n\n<p>Information on the schema reference ignored, but could be reintroduced for validation purposes.\nroot.set(\n   '{http://www.w3.org/2001/XMLSchema-instance}noNamespaceSchemaLocation',\n   'http://xml.exciting-code.org/excitinginput.xsd')</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str title</strong>:  Title for calculation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Element tree root.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.input_xml.exciting_input_xml", "modulename": "excitingtools.input.input_xml", "qualname": "exciting_input_xml", "kind": "function", "doc": "<p>Compose XML ElementTrees from exciting input classes to create an input XML tree.</p>\n\n<p>Expected usage: input_xml = exciting_input_xml(structure, groundstate, title=title)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ExcitingStructure structure</strong>:  Structure containing lattice vectors and atomic positions.</li>\n<li><strong>groundstate</strong>:  exciting ground state input object.</li>\n<li><strong>Optional[str] title</strong>:  Optional title for input file.</li>\n<li><strong>xs</strong>:  exciting xs input object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Input XML tree, with sub-elements inserted.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">ExcitingStructure</span>,</span><span class=\"param\">\t<span class=\"n\">groundstate</span><span class=\"p\">:</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">ground_state</span><span class=\"o\">.</span><span class=\"n\">ExcitingGroundStateInput</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">xs</span><span class=\"o\">.</span><span class=\"n\">ExcitingXSInput</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.input_xml.exciting_input_xml_str", "modulename": "excitingtools.input.input_xml", "qualname": "exciting_input_xml_str", "kind": "function", "doc": "<p>Compose XML ElementTrees from exciting input classes to create an input xml string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ExcitingStructure structure</strong>:  Structure containing lattice vectors and atomic positions.</li>\n<li><strong>groundstate</strong>:  exciting ground state input object.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Input XML tree as a string, with pretty formatting.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">structure</span><span class=\"o\">.</span><span class=\"n\">ExcitingStructure</span>,</span><span class=\"param\">\t<span class=\"n\">groundstate</span><span class=\"p\">:</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">ground_state</span><span class=\"o\">.</span><span class=\"n\">ExcitingGroundStateInput</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.structure", "modulename": "excitingtools.input.structure", "kind": "module", "doc": "<p>Structure class, mirroring that of exciting's structure XML sub-tree.\n<a href=\"http://exciting.wikidot.com/ref:structure\">http://exciting.wikidot.com/ref:structure</a></p>\n"}, {"fullname": "excitingtools.input.structure.check_muffin_tin_radii", "modulename": "excitingtools.input.structure", "qualname": "check_muffin_tin_radii", "kind": "function", "doc": "<p>Ensure no two MT spheres are touching.</p>\n\n<p>Muffin tin radii cannot overlap. If MT radii have been explicitly specifed,\ncheck that none of the atom-centred MT spheres overlap (which will cause exciting to crash).</p>\n\n<p>TODO(Fab) Issue 117. Implement check that MT spheres do not overlap, and uncomment the method call above\n  Construct distance matrix with scipy, using the unit cell\n  Iterate through the d matrix and apply minimum image convention\n  Find nearest neighbours (NN) for each atom - build a list of pairwise terms\n  For each NN pair, add the MT radii along the bonding axis and evaluate.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.structure.ExcitingStructure", "modulename": "excitingtools.input.structure", "qualname": "ExcitingStructure", "kind": "class", "doc": "<p>Class allowing exciting XML structure to be written from python data.</p>\n\n<p>TODO(Fabian/Alex) 117. Implement all remaining attributes:\n All elements are species-specific. They should be passed like:\n species_properties = {'S': {'LDAplusU':{'J': J, 'U': U, 'l': l}} }\n Element: LDAplusU: J, U, l\n Element: dfthalfparam: ampl, cut, exponent\n Element: shell: ionization, number</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.structure.ExcitingStructure.__init__", "modulename": "excitingtools.input.structure", "qualname": "ExcitingStructure.__init__", "kind": "function", "doc": "<p>Initialise instance of ExcitingStructure.</p>\n\n<p>TODO(Alex) Issue 117. Create our own class with a subset of methods common to ASE' Atom()\n  Then we can have a single API for this init. If ASE is used, xAtom() is just a wrapper of\n  Atom(), else we have some light methods.\nTODO(Alex/Fabian) Issue 117.\n  structure_attributes and crystal_attributes could equally be kwargs.\n  Consider changing or extending before the first major version.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>atoms: Atoms object of type ase.atoms.Atoms or of the form List[dict], for example</strong>: \natoms = [{'species': 'X', 'position': [x, y, z]}, ...].\nEach dict can also optionally contain the _valid_atom_attributes:\n{'species': 'X', 'position': [x, y, z],\n  'bfcmt': [bx, by, bz], 'lockxyz': [lx, ly, lz], 'mommtfix': [mx, my, mz]}.\nIf atoms are defined with ASE, optional atomic_properties cannot be specified.\nEventually, the list of atoms will be replaced with our custom class, which will extend ase.Atoms()\nwith the additional, optional attributes.</li>\n</ul>\n\n<p>:param lattice [a, b, c], where a, b and c are lattice vectors with 3 components.\n For example, a = [ax, ay, az]. Only required if one does not pass an ase Atoms object.</p>\n\n<ul>\n<li><strong>species_path</strong>:  Optional path to the location of species file/s.</li>\n<li><strong>structure_properties</strong>:  Optional structure properties. See _valid_structure_attributes.</li>\n<li><strong>crystal_properties</strong>:  Optional crystal properties. See _valid_crystal_attributes</li>\n<li><strong>species_properties: Optional species properties, defined as</strong>: \n{'species1': {'rmt': rmt_value}, 'species2': {'rmt': rmt_value}}</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">atoms</span>,</span><span class=\"param\">\t<span class=\"n\">lattice</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">species_path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">structure_properties</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">crystal_properties</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">species_properties</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "excitingtools.input.structure.ExcitingStructure.to_xml", "modulename": "excitingtools.input.structure", "qualname": "ExcitingStructure.to_xml", "kind": "function", "doc": "<p>Convert structure attributes to XML ElementTree</p>\n\n<p>Expect to return an XML structure which looks like:\n  <structure speciespath=\"./\"></p>\n\n<p><crystal scale=\"1.00\" scale=\"1.00\" &gt;\n     <basevect>1.0 1.0 0.0</basevect>\n     <basevect>1.0 0.0 1.0</basevect>\n     <basevect>0.0 1.0 1.0</basevect>\n   </crystal></p>\n\n<p><species speciesfile=\"Al.xml\">\n     <atom coord=\"0.0  0.0  0.0\"> </atom>\n   </species></p>\n\n<p></structure></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Element tree containing structure attributes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.xml_utils", "modulename": "excitingtools.input.xml_utils", "kind": "module", "doc": "<p>Utilities to aid in writing and formatting XML</p>\n"}, {"fullname": "excitingtools.input.xml_utils.xml_tree_to_pretty_str", "modulename": "excitingtools.input.xml_utils", "qualname": "xml_tree_to_pretty_str", "kind": "function", "doc": "<p>Convert an XML element to a pretty string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ElementTree.Element elem</strong>:  Element/ element tree</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>XML tree string, with pretty formatting.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">elem</span><span class=\"p\">:</span> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.xml_utils.line_reformatter", "modulename": "excitingtools.input.xml_utils", "qualname": "line_reformatter", "kind": "function", "doc": "<p>Identify attributes of an XML string element, and reformat them such that they are on new lines.</p>\n\n<p>NOTE: This could be split into two routines. One that finds the (start, end) of\neach attribute, and one that reformats the string, given these indices.\n(or refactored completely - current solution is not very elegant).</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>Takes:\n    input_str = <groundstate do=\"fromscratch\" ngridk=\"6 6 6\" nosource=\"false\" rgkmax=\"8.0\"\n                 tforce=\"true\" vkloff=\"0 0 0\" xctype=\"GGA_PBE_SOL\"> </groundstate>\n    tag = 'groundstate'</p>\n\n<p>Returns:\n    reformatted_str =\n    <groundstate\n         do=\"fromscratch\"\n         ngridk=\"6 6 6\"\n         nosource=\"false\"\n         rgkmax=\"8.0\"\n         tforce=\"true\"\n         vkloff=\"0 0 0\"\n         xctype=\"GGA_PBE_SOL\">\n    </groundstate></p>\n\n<p>There are 3 possibilities: the xml element has further subelements, than it ends only with a single '>',\nif the xml element has only attributes, than there are two options to close the element: either long with a\n'> </tag>' or short with a '/>'.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str input_str</strong>:  Input string, opened and closed with an XML element.</li>\n<li><strong>str tag</strong>:  XML element name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Reformatted form of input_str</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.xml_utils.prettify_tag_attributes", "modulename": "excitingtools.input.xml_utils", "qualname": "prettify_tag_attributes", "kind": "function", "doc": "<p>Prettify XML string formatting of attributes, for a given XML element.</p>\n\n<p>The routine finds the line containing the XML element which matches <tag, applies\na line_reformatter, and replaces the line. If the tag is not matched, the input\nxml_string is returned.</p>\n\n<p>Example usage:</p>\n\n<pre><code>    string = &lt;groundstate do=\"fromscratch\" ngridk=\"6 6 6\" nosource=\"false\" rgkmax=\"8.0\" tforce=\"true\" vkloff=\"0 0 0\"\n              xctype=\"GGA_PBE_SOL\"&gt; &lt;/groundstate&gt;\n    pretty_string = prettify_tag_attributes(string, '&lt;groundstate')\n    print(pretty_string)\n    &gt; &lt;groundstate\n         do=\"fromscratch\"\n         ngridk=\"6 6 6\"\n         nosource=\"false\"\n         rgkmax=\"8.0\"\n         tforce=\"true\"\n         vkloff=\"0 0 0\"\n         xctype=\"GGA_PBE_SOL\"&gt;\n    &lt;/groundstate&gt;\n</code></pre>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str xml_string</strong>:  Already-prettified XML string (assumes tags are on their own lines)</li>\n<li><strong>str tag</strong>:  XML element of the form \"<tag\" or multiple of these tags as list</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>xml_string, with the tag substring reformatted according to the example</p>\n  \n  <ul>\n  <li>Line break per attribute.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xml_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.xs", "modulename": "excitingtools.input.xs", "kind": "module", "doc": "<p>Module for class of exciting xs (excited states).\n<a href=\"http://exciting.wikidot.com/ref:xs\">http://exciting.wikidot.com/ref:xs</a></p>\n"}, {"fullname": "excitingtools.input.xs.ExcitingXSInput", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSInput", "kind": "class", "doc": "<p>Class allowing to write attributes to XML.</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.xs.ExcitingXSInput.__init__", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSInput.__init__", "kind": "function", "doc": "<p>Initialize instance of ExcitingXS</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">xstype</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">screening</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">base_class</span><span class=\"o\">.</span><span class=\"n\">ExcitingXMLInput</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">BSE</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">base_class</span><span class=\"o\">.</span><span class=\"n\">ExcitingXMLInput</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">qpointset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">energywindow</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">base_class</span><span class=\"o\">.</span><span class=\"n\">ExcitingXMLInput</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "excitingtools.input.xs.ExcitingXSInput.to_xml", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSInput.to_xml", "kind": "function", "doc": "<p>Put class attributes into an XML tree, 'xs'.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.xs.ExcitingXSBSEInput", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSBSEInput", "kind": "class", "doc": "<p>Class for exciting BSE Input</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.xs.ExcitingXSBSEInput.__init__", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSBSEInput.__init__", "kind": "function", "doc": "<p>Initialise class attributes with kwargs.</p>\n\n<p>Rather than define all options for a given method, pass as kwargs and directly\ninsert as class attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Method name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">BSE</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "excitingtools.input.xs.ExcitingXSScreeningInput", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSScreeningInput", "kind": "class", "doc": "<p>Class for exciting Screening Input</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.xs.ExcitingXSScreeningInput.__init__", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSScreeningInput.__init__", "kind": "function", "doc": "<p>Initialise class attributes with kwargs.</p>\n\n<p>Rather than define all options for a given method, pass as kwargs and directly\ninsert as class attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Method name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">screening</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "excitingtools.input.xs.ExcitingXSEnergywindowInput", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSEnergywindowInput", "kind": "class", "doc": "<p>Class for exciting Energywindow Input</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.xs.ExcitingXSEnergywindowInput.__init__", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSEnergywindowInput.__init__", "kind": "function", "doc": "<p>Initialise class attributes with kwargs.</p>\n\n<p>Rather than define all options for a given method, pass as kwargs and directly\ninsert as class attributes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Method name.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">energywindow</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "excitingtools.input.xs.ExcitingXSQpointsetInput", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSQpointsetInput", "kind": "class", "doc": "<p>Class for exciting Qpointset Input</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.xs.ExcitingXSQpointsetInput.__init__", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSQpointsetInput.__init__", "kind": "function", "doc": "<p>Qpointset should be passed either as numpy array or as a list of lists, so either\nnp.array([[0., 0., 0.], [0.0, 0.0, 0.01], ...])\nor\n[[0., 0., 0.], [0.0, 0.0, 0.01], ...]</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">qpointset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">0.</span><span class=\"p\">])</span></span>)</span>"}, {"fullname": "excitingtools.input.xs.ExcitingXSQpointsetInput.to_xml", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSQpointsetInput.to_xml", "kind": "function", "doc": "<p>Put class attributes into an XML tree, with the element given by self.name.</p>\n\n<p>Example ground state XML sub-tree:\n   <groundstate vkloff=\"0.5  0.5  0.5\" ngridk=\"2 2 2\" mixer=\"msec\" </groundstate></p>\n\n<p>Note, kwargs preserve the order of the arguments, however the order does not appear to be\npreserved when passed to (or perhaps converted to string) with xml.etree.ElementTree.tostring.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sub_tree element tree, with class attributes inserted.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.input.xs.ExcitingXSPlanInput", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSPlanInput", "kind": "class", "doc": "<p>Class for exciting Plan Input</p>\n", "bases": "excitingtools.input.base_class.ExcitingXMLInput"}, {"fullname": "excitingtools.input.xs.ExcitingXSPlanInput.__init__", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSPlanInput.__init__", "kind": "function", "doc": "<p>Plan doonly elements are passed as a List of strings in the order exciting shall execute them:\n    ['bse', 'xseigval', ...]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">plan</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "excitingtools.input.xs.ExcitingXSPlanInput.to_xml", "modulename": "excitingtools.input.xs", "qualname": "ExcitingXSPlanInput.to_xml", "kind": "function", "doc": "<p>Put class attributes into an XML tree, with the element given by self.name.</p>\n\n<p>Example ground state XML sub-tree:\n   <groundstate vkloff=\"0.5  0.5  0.5\" ngridk=\"2 2 2\" mixer=\"msec\" </groundstate></p>\n\n<p>Note, kwargs preserve the order of the arguments, however the order does not appear to be\npreserved when passed to (or perhaps converted to string) with xml.etree.ElementTree.tostring.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sub_tree element tree, with class attributes inserted.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"n\">etree</span><span class=\"o\">.</span><span class=\"n\">ElementTree</span><span class=\"o\">.</span><span class=\"n\">Element</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.math", "modulename": "excitingtools.math", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.math.math_utils", "modulename": "excitingtools.math.math_utils", "kind": "module", "doc": "<p>Math functions.</p>\n"}, {"fullname": "excitingtools.math.math_utils.triple_product", "modulename": "excitingtools.math.math_utils", "qualname": "triple_product", "kind": "function", "doc": "<p>Vector triple product, defined as \n  \\mathbf{a} \\cdot (\\mathbf{b} \\wedge \\mathbf{c})</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>a</strong>:  Vector a </li>\n<li><strong>b</strong>:  Vector b</li>\n<li><strong>c</strong>:  Vector c\n:return triple product</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span>, </span><span class=\"param\"><span class=\"n\">c</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.math.math_utils.unit_vector", "modulename": "excitingtools.math.math_utils", "qualname": "unit_vector", "kind": "function", "doc": "<p>Unit vector of a vector 'x' \n  \\mathbf{\\hat{x}} =  \\frac{\\mathbf{x}}{|\\mathbf{x}|}</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  Vector x\n:result: Unit vector of x</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils", "modulename": "excitingtools.parser_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.parser_utils.erroneous_file_error", "modulename": "excitingtools.parser_utils.erroneous_file_error", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.parser_utils.erroneous_file_error.ErroneousFileError", "modulename": "excitingtools.parser_utils.erroneous_file_error", "qualname": "ErroneousFileError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "excitingtools.parser_utils.grep_parser", "modulename": "excitingtools.parser_utils.grep_parser", "kind": "module", "doc": "<p>Wrapper for command-line grep.</p>\n"}, {"fullname": "excitingtools.parser_utils.grep_parser.grep", "modulename": "excitingtools.parser_utils.grep_parser", "qualname": "grep", "kind": "function", "doc": "<p>Wrapper for command-line grep.</p>\n\n<p>Can pass any grep options like: options = {'A': value}</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str string</strong>:  Search string</li>\n<li><strong>str fname</strong>:  File name to search</li>\n<li><strong>Optional[dict] options</strong>:  Grep options.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>String if matched, None if failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">options</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.parser_decorators", "modulename": "excitingtools.parser_utils.parser_decorators", "kind": "module", "doc": "<p>Decorators and wrappers for parser functions.</p>\n"}, {"fullname": "excitingtools.parser_utils.parser_decorators.return_file_string", "modulename": "excitingtools.parser_utils.parser_decorators", "qualname": "return_file_string", "kind": "function", "doc": "<p>Given a file name, return the file contents as a string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  File name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>File contents string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.parser_decorators.file_handler", "modulename": "excitingtools.parser_utils.parser_decorators", "qualname": "file_handler", "kind": "function", "doc": "<p>Provide a wrapper for file IO.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_name</strong>:  File name or Path object</li>\n<li><strong>Callable[[str], dict] parser_func</strong>:  Parser function, which expects a parsed\nstring as its only input and returns a dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict data: Dictionary of parsed data, with values converted from strings.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parser_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.parser_decorators.accept_file_name", "modulename": "excitingtools.parser_utils.parser_decorators", "qualname": "accept_file_name", "kind": "function", "doc": "<p>Decorate parsers that accept string contents, such that they take file names instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">parser</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.parser_decorators.xml_root", "modulename": "excitingtools.parser_utils.parser_decorators", "qualname": "xml_root", "kind": "function", "doc": "<p>Decorate XML parsers, enabling the developer to pass\nan XML file name, XML string or ElementTree.Element as input\nand return the XML root.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.regex_parser", "modulename": "excitingtools.parser_utils.regex_parser", "kind": "module", "doc": "<p>Wrappers for parsing with regex</p>\n"}, {"fullname": "excitingtools.parser_utils.regex_parser.parse_value_regex", "modulename": "excitingtools.parser_utils.regex_parser", "qualname": "parse_value_regex", "kind": "function", "doc": "<p>Match the first instance of a string (key) if present in file_string,\nand return the result in a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n<li><strong>str key</strong>:  String to match, also used as a key in the returned dictionary</li>\n<li><strong>optional bool no_colon</strong>:  Remove trailing colons from parsed data keys</li>\n<li><strong>optional bool silent_key_error</strong>:  Print key error</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">no_colon</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">silent_key_error</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.regex_parser.parse_values_regex", "modulename": "excitingtools.parser_utils.regex_parser", "qualname": "parse_values_regex", "kind": "function", "doc": "<p>For a list of strings, match the first instance of each string\n(contained in keys) if present in file_string, and return the\nresult in a dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n<li><strong>List[str] keys</strong>:  Keys to match in lines of file_string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Matched data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.simple_parser", "modulename": "excitingtools.parser_utils.simple_parser", "kind": "module", "doc": "<p>Simple text parsers.</p>\n"}, {"fullname": "excitingtools.parser_utils.simple_parser.match_current_return_line_n", "modulename": "excitingtools.parser_utils.simple_parser", "qualname": "match_current_return_line_n", "kind": "function", "doc": "<p>Match a string on the ith line and return a substring from the i+n_line line.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n<li><strong>str match</strong>:  String to match</li>\n<li><strong>int n_line</strong>:  The index of the line to return, following the matched line</li>\n</ul>\n\n<p>:return Union[str, None] matched line string, or None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">match</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">n_line</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.parser_utils.simple_parser.match_current_extract_from_line_n", "modulename": "excitingtools.parser_utils.simple_parser", "qualname": "match_current_extract_from_line_n", "kind": "function", "doc": "<p>Given an input_string, match a substring (defined by the key of keys_extractions),\nreturn the a substring from the i+n_line line below the match, and extract a value\nfrom that line using the value of the key, defined by keys_extractions[key]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str file_string</strong>:  Input string</li>\n<li><strong>dict keys_extractions</strong>:  keys = strings to match\nvalues = methods of data extraction from the strings</li>\n<li><strong>int n_line</strong>:  The index of the line to return, following the matched line</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary of extracted data from the nth line below a matched string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">keys_extractions</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">n_line</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.runner", "modulename": "excitingtools.runner", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.runner.runner", "modulename": "excitingtools.runner.runner", "kind": "module", "doc": "<p>Binary runner and results classes.</p>\n"}, {"fullname": "excitingtools.runner.runner.RunnerCode", "modulename": "excitingtools.runner.runner", "qualname": "RunnerCode", "kind": "class", "doc": "<p>Runner codes.\nBy default, the initial value starts at 1.</p>\n", "bases": "enum.Enum"}, {"fullname": "excitingtools.runner.runner.RunnerCode.time_out", "modulename": "excitingtools.runner.runner", "qualname": "RunnerCode.time_out", "kind": "variable", "doc": "<p></p>\n", "default_value": " = &lt;RunnerCode.time_out: &lt;class &#x27;enum.auto&#x27;&gt;&gt;"}, {"fullname": "excitingtools.runner.runner.SubprocessRunResults", "modulename": "excitingtools.runner.runner", "qualname": "SubprocessRunResults", "kind": "class", "doc": "<p>Results returned from subprocess.run()</p>\n"}, {"fullname": "excitingtools.runner.runner.SubprocessRunResults.__init__", "modulename": "excitingtools.runner.runner", "qualname": "SubprocessRunResults.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stdout</span>,</span><span class=\"param\">\t<span class=\"n\">stderr</span>,</span><span class=\"param\">\t<span class=\"n\">return_code</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">RunnerCode</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">process_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "excitingtools.runner.runner.BinaryRunner", "modulename": "excitingtools.runner.runner", "qualname": "BinaryRunner", "kind": "class", "doc": "<p>Class to execute a subprocess.</p>\n"}, {"fullname": "excitingtools.runner.runner.BinaryRunner.__init__", "modulename": "excitingtools.runner.runner", "qualname": "BinaryRunner.__init__", "kind": "function", "doc": "<p>Initialise class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str binary</strong>:  Binary name prepended by full path, or just binary name (if present in $PATH).</li>\n<li><strong>Union[List[str], str] run_cmd: Run commands sequentially as a list. For example</strong>: \n<ul>\n<li>For serial: ['./'] or ['']</li>\n<li>For MPI:   ['mpirun', '-np', '2']\nor as a string. For example\"</li>\n<li>For serial: \"./\"</li>\n<li>For MPI: \"mpirun -np 2\"</li>\n</ul></li>\n<li><strong>int omp_num_threads</strong>:  Number of OMP threads.</li>\n<li><strong>int time_out</strong>:  Number of seconds before a job is defined to have timed out.</li>\n<li><strong>List[str] args</strong>:  Optional arguments for the binary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">binary</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">run_cmd</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">omp_num_threads</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_out</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "excitingtools.runner.runner.BinaryRunner.run", "modulename": "excitingtools.runner.runner", "qualname": "BinaryRunner.run", "kind": "function", "doc": "<p>Run a binary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">excitingtools</span><span class=\"o\">.</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">SubprocessRunResults</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils", "modulename": "excitingtools.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "excitingtools.utils.dict_utils", "modulename": "excitingtools.utils.dict_utils", "kind": "module", "doc": "<p>Dictionary Utilities.</p>\n"}, {"fullname": "excitingtools.utils.dict_utils.common_iterable", "modulename": "excitingtools.utils.dict_utils", "qualname": "common_iterable", "kind": "function", "doc": "<p>Create an iterable dict or tuple, such that one can iterate over a\ndictionary or list with the same syntax:</p>\n\n<pre><code>for index in common_iterable(d):\n    print('index = key or integer index:', index)\n    print('d[index] = dictionary value or list element:', d[index])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.dict_utils.container_converter", "modulename": "excitingtools.utils.dict_utils", "qualname": "container_converter", "kind": "function", "doc": "<p>Converts string representations of numerical data into numerical data.</p>\n\n<p>Acts on string data in the input dict.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict data</strong>:  Dictionary to be copied containing string values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict new_data: Copied dictionary with all string literal values converted to numerical values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.dict_utils.serialise_dict_values", "modulename": "excitingtools.utils.dict_utils", "qualname": "serialise_dict_values", "kind": "function", "doc": "<p>Mutate dictionary values that are objects, to dictionaries.\nFunction works recursively, so no type-hinting.</p>\n\n<p>If any value within the dictionary is a set, it is converted to a list because\ncommon_iterable is not compatible with sets (sets cannot be indexed).</p>\n\n<p>If any value within the dictionary is a tuple, it is converted to a list because\ntuples are immutable, and therefore not consistent with an implementation that\nmutates the input.</p>\n\n<p>Sets and tuples are converted to lists regardless of whether they contain objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict input_dict</strong>:  Dictionary.</li>\n<li><strong>dict output_dict</strong>:  Dictionary with any object values converted to dictionaries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.dict_utils.get_hashable_entries", "modulename": "excitingtools.utils.dict_utils", "qualname": "get_hashable_entries", "kind": "function", "doc": "<p>Create a generator of all hashable values, removing nesting.</p>\n\n<p>Note, this will fail if a cross edge or a back edge is included in the dict\ni.e. a self-reference of the form:</p>\n\n<pre><code>A = {key1: value, key2: A}\n</code></pre>\n\n<p>However, for the use case of flattening parsed results, this should never be an issue.</p>\n\n<p>Reference: <a href=\"https://stackoverflow.com/questions/10756427/loop-through-all-nested-dictionary-values\">https://stackoverflow.com/questions/10756427/loop-through-all-nested-dictionary-values</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>nested</strong>:  Nested dictionary with a mix and hashable and non-hashable values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Iterator[tuple] (key, value): Generator for tuples, containing keys and values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nested</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.dict_utils.delete_nested_key", "modulename": "excitingtools.utils.dict_utils", "qualname": "delete_nested_key", "kind": "function", "doc": "<p>Delete a key at any level of a nested dictionary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dict dictionary</strong>:  dictionary, mutated by function.</li>\n<li><strong>list key_chain</strong>:  List of keys leading to the item to be deleted.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">key_chain</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.dict_utils.check_valid_keys", "modulename": "excitingtools.utils.dict_utils", "qualname": "check_valid_keys", "kind": "function", "doc": "<p>Check that a given set of input keys are valid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_keys</strong>:  Input keys</li>\n<li><strong>valid_keys</strong>:  Valid keys</li>\n<li><strong>name</strong>:  Optional name for error message</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_keys</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">KeysView</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">valid_keys</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">KeysView</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.dict_utils.string_value_to_type", "modulename": "excitingtools.utils.dict_utils", "qualname": "string_value_to_type", "kind": "function", "doc": "<p>Convert dictionary string values to appropriate types.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input</strong>:  Dictionary with string values.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with type-converted values.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.test_utils", "modulename": "excitingtools.utils.test_utils", "kind": "module", "doc": "<p>Classes and functions to aid unit testing.</p>\n"}, {"fullname": "excitingtools.utils.test_utils.MockFile", "modulename": "excitingtools.utils.test_utils", "qualname": "MockFile", "kind": "class", "doc": "<p>Single class for testing parsers that require either:</p>\n\n<ul>\n<li>File.</li>\n<li>String contents of file.</li>\n</ul>\n\n<p>Usage:\n@pytest.fixture\ndef file_mock(tmp_path):\n   file = tmp_path / _file_name\n   file.write_text(string_contents)\n   return MockFile(file, string_contents)</p>\n"}, {"fullname": "excitingtools.utils.test_utils.MockFile.__init__", "modulename": "excitingtools.utils.test_utils", "qualname": "MockFile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "excitingtools.utils.utils", "modulename": "excitingtools.utils.utils", "kind": "module", "doc": "<p>General utility functions. Typically conversion/type-checking.</p>\n"}, {"fullname": "excitingtools.utils.utils.can_be_float", "modulename": "excitingtools.utils.utils", "qualname": "can_be_float", "kind": "function", "doc": "<p>Check if a value can be interpreted as a float</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value</strong>:  Input</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Value can be interpreted as a float</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.utils.convert_to_literal", "modulename": "excitingtools.utils.utils", "qualname": "convert_to_literal", "kind": "function", "doc": "<p>If possible, convert string to an int or float</p>\n\n<p>For example:\n  convert_to_literal('1.1') returns 1.1\n  convert_to_literal('1') returns 1\n  convert_to_literal('1.0') returns 1.0</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str input_str</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Numerical literal of x, else None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.utils.get_new_line_indices", "modulename": "excitingtools.utils.utils", "qualname": "get_new_line_indices", "kind": "function", "doc": "<p>Given a string, return the indices that correspond to the\nstart of new lines.</p>\n\n<p>For example,\n line = get_new_line_indices(string)\n # First line\n string[line[0]: line[1]]\n # 6th line\n string[line[5]: line[6]]</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>str string</strong>:  Input string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>List of indices corresponding to\n   new lines in string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.utils.list_to_str", "modulename": "excitingtools.utils.utils", "qualname": "list_to_str", "kind": "function", "doc": "<p>Convert a list to a string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mylist</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">modifier</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "excitingtools.utils.utils.string_to_bool", "modulename": "excitingtools.utils.utils", "qualname": "string_to_bool", "kind": "function", "doc": "<p>Convert string representation of true/false to True/False.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>string</strong>:  String\n:return bool</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();